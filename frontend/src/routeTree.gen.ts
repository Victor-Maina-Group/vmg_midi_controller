/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as ControlRouteImport } from './routes/control/_route'
import { Route as ControlTransportRouteImport } from './routes/control/transport/route'
import { Route as ControlSlidersRouteImport } from './routes/control/sliders/route'
import { Route as ControlPadsRouteImport } from './routes/control/pads/route'
import { Route as ControlSlidersGroupIdImport } from './routes/control/sliders/$groupId'
import { Route as ControlPadsGroupIdImport } from './routes/control/pads/$groupId'

// Create Virtual Routes

const ControlImport = createFileRoute('/control')()

// Create/Update Routes

const ControlRoute = ControlImport.update({
  path: '/control',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const ControlRouteRoute = ControlRouteImport.update({
  id: '/_route',
  getParentRoute: () => ControlRoute,
} as any)

const ControlTransportRouteRoute = ControlTransportRouteImport.update({
  path: '/control/transport',
  getParentRoute: () => rootRoute,
} as any)

const ControlSlidersRouteRoute = ControlSlidersRouteImport.update({
  path: '/control/sliders',
  getParentRoute: () => rootRoute,
} as any)

const ControlPadsRouteRoute = ControlPadsRouteImport.update({
  path: '/control/pads',
  getParentRoute: () => rootRoute,
} as any)

const ControlSlidersGroupIdRoute = ControlSlidersGroupIdImport.update({
  path: '/$groupId',
  getParentRoute: () => ControlSlidersRouteRoute,
} as any)

const ControlPadsGroupIdRoute = ControlPadsGroupIdImport.update({
  path: '/$groupId',
  getParentRoute: () => ControlPadsRouteRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/control/pads': {
      id: '/control/pads'
      path: '/control/pads'
      fullPath: '/control/pads'
      preLoaderRoute: typeof ControlPadsRouteImport
      parentRoute: typeof rootRoute
    }
    '/control/sliders': {
      id: '/control/sliders'
      path: '/control/sliders'
      fullPath: '/control/sliders'
      preLoaderRoute: typeof ControlSlidersRouteImport
      parentRoute: typeof rootRoute
    }
    '/control/transport': {
      id: '/control/transport'
      path: '/control/transport'
      fullPath: '/control/transport'
      preLoaderRoute: typeof ControlTransportRouteImport
      parentRoute: typeof rootRoute
    }
    '/control': {
      id: '/control'
      path: '/control'
      fullPath: '/control'
      preLoaderRoute: typeof ControlImport
      parentRoute: typeof rootRoute
    }
    '/control/_route': {
      id: '/control/_route'
      path: '/control'
      fullPath: '/control'
      preLoaderRoute: typeof ControlRouteImport
      parentRoute: typeof ControlRoute
    }
    '/control/pads/$groupId': {
      id: '/control/pads/$groupId'
      path: '/$groupId'
      fullPath: '/control/pads/$groupId'
      preLoaderRoute: typeof ControlPadsGroupIdImport
      parentRoute: typeof ControlPadsRouteImport
    }
    '/control/sliders/$groupId': {
      id: '/control/sliders/$groupId'
      path: '/$groupId'
      fullPath: '/control/sliders/$groupId'
      preLoaderRoute: typeof ControlSlidersGroupIdImport
      parentRoute: typeof ControlSlidersRouteImport
    }
  }
}

// Create and export the route tree

interface ControlPadsRouteRouteChildren {
  ControlPadsGroupIdRoute: typeof ControlPadsGroupIdRoute
}

const ControlPadsRouteRouteChildren: ControlPadsRouteRouteChildren = {
  ControlPadsGroupIdRoute: ControlPadsGroupIdRoute,
}

const ControlPadsRouteRouteWithChildren =
  ControlPadsRouteRoute._addFileChildren(ControlPadsRouteRouteChildren)

interface ControlSlidersRouteRouteChildren {
  ControlSlidersGroupIdRoute: typeof ControlSlidersGroupIdRoute
}

const ControlSlidersRouteRouteChildren: ControlSlidersRouteRouteChildren = {
  ControlSlidersGroupIdRoute: ControlSlidersGroupIdRoute,
}

const ControlSlidersRouteRouteWithChildren =
  ControlSlidersRouteRoute._addFileChildren(ControlSlidersRouteRouteChildren)

interface ControlRouteChildren {
  ControlRouteRoute: typeof ControlRouteRoute
}

const ControlRouteChildren: ControlRouteChildren = {
  ControlRouteRoute: ControlRouteRoute,
}

const ControlRouteWithChildren =
  ControlRoute._addFileChildren(ControlRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/control/pads': typeof ControlPadsRouteRouteWithChildren
  '/control/sliders': typeof ControlSlidersRouteRouteWithChildren
  '/control/transport': typeof ControlTransportRouteRoute
  '/control': typeof ControlRouteRoute
  '/control/pads/$groupId': typeof ControlPadsGroupIdRoute
  '/control/sliders/$groupId': typeof ControlSlidersGroupIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/control/pads': typeof ControlPadsRouteRouteWithChildren
  '/control/sliders': typeof ControlSlidersRouteRouteWithChildren
  '/control/transport': typeof ControlTransportRouteRoute
  '/control': typeof ControlRouteRoute
  '/control/pads/$groupId': typeof ControlPadsGroupIdRoute
  '/control/sliders/$groupId': typeof ControlSlidersGroupIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/control/pads': typeof ControlPadsRouteRouteWithChildren
  '/control/sliders': typeof ControlSlidersRouteRouteWithChildren
  '/control/transport': typeof ControlTransportRouteRoute
  '/control': typeof ControlRouteWithChildren
  '/control/_route': typeof ControlRouteRoute
  '/control/pads/$groupId': typeof ControlPadsGroupIdRoute
  '/control/sliders/$groupId': typeof ControlSlidersGroupIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/control/pads'
    | '/control/sliders'
    | '/control/transport'
    | '/control'
    | '/control/pads/$groupId'
    | '/control/sliders/$groupId'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/control/pads'
    | '/control/sliders'
    | '/control/transport'
    | '/control'
    | '/control/pads/$groupId'
    | '/control/sliders/$groupId'
  id:
    | '__root__'
    | '/'
    | '/control/pads'
    | '/control/sliders'
    | '/control/transport'
    | '/control'
    | '/control/_route'
    | '/control/pads/$groupId'
    | '/control/sliders/$groupId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  ControlPadsRouteRoute: typeof ControlPadsRouteRouteWithChildren
  ControlSlidersRouteRoute: typeof ControlSlidersRouteRouteWithChildren
  ControlTransportRouteRoute: typeof ControlTransportRouteRoute
  ControlRoute: typeof ControlRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  ControlPadsRouteRoute: ControlPadsRouteRouteWithChildren,
  ControlSlidersRouteRoute: ControlSlidersRouteRouteWithChildren,
  ControlTransportRouteRoute: ControlTransportRouteRoute,
  ControlRoute: ControlRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/control/pads",
        "/control/sliders",
        "/control/transport",
        "/control"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/control/pads": {
      "filePath": "control/pads/route.tsx",
      "children": [
        "/control/pads/$groupId"
      ]
    },
    "/control/sliders": {
      "filePath": "control/sliders/route.tsx",
      "children": [
        "/control/sliders/$groupId"
      ]
    },
    "/control/transport": {
      "filePath": "control/transport/route.tsx"
    },
    "/control": {
      "filePath": "control",
      "children": [
        "/control/_route"
      ]
    },
    "/control/_route": {
      "filePath": "control/_route.tsx",
      "parent": "/control"
    },
    "/control/pads/$groupId": {
      "filePath": "control/pads/$groupId.tsx",
      "parent": "/control/pads"
    },
    "/control/sliders/$groupId": {
      "filePath": "control/sliders/$groupId.tsx",
      "parent": "/control/sliders"
    }
  }
}
ROUTE_MANIFEST_END */
