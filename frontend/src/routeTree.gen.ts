/* prettier-ignore-start */

/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file is auto-generated by TanStack Router

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ControllersImport } from './routes/_controllers'
import { Route as ControllersIndexImport } from './routes/_controllers/index'
import { Route as ControllersTransportRouteImport } from './routes/_controllers/transport/route'
import { Route as ControllersSlidersRouteImport } from './routes/_controllers/sliders/route'
import { Route as ControllersPadsRouteImport } from './routes/_controllers/pads/route'

// Create/Update Routes

const ControllersRoute = ControllersImport.update({
  id: '/_controllers',
  getParentRoute: () => rootRoute,
} as any)

const ControllersIndexRoute = ControllersIndexImport.update({
  path: '/',
  getParentRoute: () => ControllersRoute,
} as any)

const ControllersTransportRouteRoute = ControllersTransportRouteImport.update({
  path: '/transport',
  getParentRoute: () => ControllersRoute,
} as any)

const ControllersSlidersRouteRoute = ControllersSlidersRouteImport.update({
  path: '/sliders',
  getParentRoute: () => ControllersRoute,
} as any)

const ControllersPadsRouteRoute = ControllersPadsRouteImport.update({
  path: '/pads',
  getParentRoute: () => ControllersRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/_controllers': {
      id: '/_controllers'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof ControllersImport
      parentRoute: typeof rootRoute
    }
    '/_controllers/pads': {
      id: '/_controllers/pads'
      path: '/pads'
      fullPath: '/pads'
      preLoaderRoute: typeof ControllersPadsRouteImport
      parentRoute: typeof ControllersImport
    }
    '/_controllers/sliders': {
      id: '/_controllers/sliders'
      path: '/sliders'
      fullPath: '/sliders'
      preLoaderRoute: typeof ControllersSlidersRouteImport
      parentRoute: typeof ControllersImport
    }
    '/_controllers/transport': {
      id: '/_controllers/transport'
      path: '/transport'
      fullPath: '/transport'
      preLoaderRoute: typeof ControllersTransportRouteImport
      parentRoute: typeof ControllersImport
    }
    '/_controllers/': {
      id: '/_controllers/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof ControllersIndexImport
      parentRoute: typeof ControllersImport
    }
  }
}

// Create and export the route tree

interface ControllersRouteChildren {
  ControllersPadsRouteRoute: typeof ControllersPadsRouteRoute
  ControllersSlidersRouteRoute: typeof ControllersSlidersRouteRoute
  ControllersTransportRouteRoute: typeof ControllersTransportRouteRoute
  ControllersIndexRoute: typeof ControllersIndexRoute
}

const ControllersRouteChildren: ControllersRouteChildren = {
  ControllersPadsRouteRoute: ControllersPadsRouteRoute,
  ControllersSlidersRouteRoute: ControllersSlidersRouteRoute,
  ControllersTransportRouteRoute: ControllersTransportRouteRoute,
  ControllersIndexRoute: ControllersIndexRoute,
}

const ControllersRouteWithChildren = ControllersRoute._addFileChildren(
  ControllersRouteChildren,
)

export interface FileRoutesByFullPath {
  '': typeof ControllersRouteWithChildren
  '/pads': typeof ControllersPadsRouteRoute
  '/sliders': typeof ControllersSlidersRouteRoute
  '/transport': typeof ControllersTransportRouteRoute
  '/': typeof ControllersIndexRoute
}

export interface FileRoutesByTo {
  '/pads': typeof ControllersPadsRouteRoute
  '/sliders': typeof ControllersSlidersRouteRoute
  '/transport': typeof ControllersTransportRouteRoute
  '/': typeof ControllersIndexRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/_controllers': typeof ControllersRouteWithChildren
  '/_controllers/pads': typeof ControllersPadsRouteRoute
  '/_controllers/sliders': typeof ControllersSlidersRouteRoute
  '/_controllers/transport': typeof ControllersTransportRouteRoute
  '/_controllers/': typeof ControllersIndexRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '' | '/pads' | '/sliders' | '/transport' | '/'
  fileRoutesByTo: FileRoutesByTo
  to: '/pads' | '/sliders' | '/transport' | '/'
  id:
    | '__root__'
    | '/_controllers'
    | '/_controllers/pads'
    | '/_controllers/sliders'
    | '/_controllers/transport'
    | '/_controllers/'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  ControllersRoute: typeof ControllersRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  ControllersRoute: ControllersRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* prettier-ignore-end */

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/_controllers"
      ]
    },
    "/_controllers": {
      "filePath": "_controllers.tsx",
      "children": [
        "/_controllers/pads",
        "/_controllers/sliders",
        "/_controllers/transport",
        "/_controllers/"
      ]
    },
    "/_controllers/pads": {
      "filePath": "_controllers/pads/route.tsx",
      "parent": "/_controllers"
    },
    "/_controllers/sliders": {
      "filePath": "_controllers/sliders/route.tsx",
      "parent": "/_controllers"
    },
    "/_controllers/transport": {
      "filePath": "_controllers/transport/route.tsx",
      "parent": "/_controllers"
    },
    "/_controllers/": {
      "filePath": "_controllers/index.tsx",
      "parent": "/_controllers"
    }
  }
}
ROUTE_MANIFEST_END */
